import React, { useEffect, useState } from 'react';
import { IoIosSend } from "react-icons/io";
import { Button } from '@/components/ui/button';
import { GetPlaceDetails } from '@/service/GlobalApi';
// eslint-disable-next-line no-unused-vars
import { format } from 'date-fns';
import { FaHeart } from 'react-icons/fa';
import { toast } from 'sonner';
import jsPDF from 'jspdf';

function InfoSection({ trip }) {
  const [photoUrl, setPhotoUrl] = useState('');
  const [isLoading, setIsLoading] = useState(true);
  // eslint-disable-next-line no-unused-vars
  const [hasError, setHasError] = useState(false);
  const [tripDate, setTripDate] = useState('');

  useEffect(() => {
    if (trip?.userSelection?.location?.label) {
      fetchPhotoWithFallbacks();
    }
  }, [trip]);

  const fetchPhotoWithFallbacks = async () => {
    setIsLoading(true);
    setHasError(false);

    try {
      const locationName = trip.userSelection.location.label;
      const resp = await GetPlaceDetails({ textQuery: locationName });
      const place = resp?.data?.places?.[0];
      const photoName = place?.photos?.[0]?.name;

      if (photoName) {
        const directUrl = `https://places.googleapis.com/v1/${photoName}/media?key=${import.meta.env.VITE_GOOGLE_PLACE_API_KEY}&maxHeightPx=800&maxWidthPx=800`;

        const img = new Image();
        img.src = directUrl;
        await new Promise((resolve) => {
          img.onload = () => {
            setPhotoUrl(directUrl);
            resolve();
          };
          img.onerror = () => {
            fetchGenericLocationPhoto(locationName).then(resolve);
          };
        });
      } else {
        await fetchGenericLocationPhoto(locationName);
      }
    } catch (error) {
      console.error("Error fetching photos:", error);
      setPhotoUrl('/lebanon-default.jpg');
      setHasError(true);
    } finally {
      setIsLoading(false);
    }
  };

  const fetchGenericLocationPhoto = async (locationName) => {
    try {
      const genericQuery = `${locationName.split(',')[0]} Lebanon`;
      const resp = await GetPlaceDetails({ textQuery: genericQuery });
      const place = resp?.data?.places?.[0];
      const photoName = place?.photos?.[0]?.name;

      if (photoName) {
        const url = `https://places.googleapis.com/v1/${photoName}/media?key=${import.meta.env.VITE_GOOGLE_PLACE_API_KEY}&maxHeightPx=800&maxWidthPx=800`;
        setPhotoUrl(url);
      } else {
        throw new Error("No generic photo found");
      }
    // eslint-disable-next-line no-unused-vars
    } catch (error) {
      console.log("Using default Lebanon image as fallback");
      setPhotoUrl('/lebanon-default.jpg');
      setHasError(true);
    }
  };

  const handleSaveToProfile = () => {
    toast.success("Trip saved to profile successfully!");
  };

  const handleDownloadPDF = () => {
    const doc = new jsPDF();
    const parsedTripData = trip?.tripData ? JSON.parse(trip.tripData) : {};
  
    doc.setFontSize(20);
    doc.text(`Trip Plan: ${trip?.userSelection?.location?.label || 'Unknown Trip'}`, 10, 20);
  
    doc.setFontSize(12);
    doc.text(`Number of Days: ${trip?.userSelection?.noOfDays || '-'} days`, 10, 40);
    doc.text(`Budget: ${trip?.userSelection?.budget || '-'} USD`, 10, 50);
    doc.text(`Travelers: ${trip?.userSelection?.traveler || '-'} people`, 10, 60);
  
    // Hotels Section
    if (parsedTripData?.Hotels?.length > 0) {
      doc.setFontSize(16);
      doc.text("Hotel Recommendations:", 10, 80);
      doc.setFontSize(12);
      parsedTripData.Hotels.slice(0, 3).forEach((hotel, index) => {
        doc.text(`- ${hotel.HotelName || "Unnamed Hotel"}`, 15, 90 + index * 10);
      });
    }
  
    // Places to Visit Section
    if (parsedTripData?.Itinerary?.length > 0) {
      let yPosition = 130;
      doc.setFontSize(16);
      doc.text("Places to Visit:", 10, yPosition);
      yPosition += 10;
      doc.setFontSize(12);
  
      parsedTripData.Itinerary.forEach((day, dayIdx) => {
        doc.text(`Day ${dayIdx + 1}:`, 15, yPosition);
        yPosition += 8;
        // eslint-disable-next-line no-unused-vars
        day.Activities.forEach((activity, actIdx) => {
          doc.text(`â€¢ ${activity.PlaceName}`, 20, yPosition);
          yPosition += 7;
        });
        yPosition += 5;
      });
    }
  
    doc.setFontSize(10);
    doc.text("Generated by Ziyarah AI Travel Planner", 10, 280);
  
    doc.save(`${trip?.userSelection?.location?.label?.replaceAll(' ', '_') || 'trip'}_plan.pdf`);
  };
  

  return (
    <div className="rounded-2xl shadow-md overflow-hidden transition-all duration-300 bg-white mb-6">
      <div className="relative w-full h-[340px] bg-gray-200">
        {isLoading ? (
          <div className="flex items-center justify-center h-full text-gray-400">
            <div className="flex flex-col items-center">
              <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-gray-400 mb-2"></div>
              Loading destination...
            </div>
          </div>
        ) : (
          <img
            src={photoUrl}
            alt={trip?.userSelection?.location?.label || "Lebanon destination"}
            className="h-full w-full object-cover object-center rounded-t-2xl"
            onError={() => {
              console.log("Final image load failed, using default");
              setPhotoUrl('/lebanon-default.jpg');
              setHasError(true);
            }}
            loading="eager"
          />
        )}
      </div>

      <div className="flex flex-col md:flex-row justify-between items-start md:items-center px-6 py-4 gap-4">
        <div className="flex flex-col gap-3">
          <h2 className="text-2xl font-bold text-gray-800">
            {trip?.userSelection?.location?.label}
          </h2>
          <div className="flex flex-wrap gap-3">
            <span className="px-3 py-1 bg-gray-100 text-sm text-gray-600 rounded-full shadow-sm">
              ðŸ—“ {trip?.userSelection?.noOfDays} Day
            </span>
            <span className="px-3 py-1 bg-gray-100 text-sm text-gray-600 rounded-full shadow-sm">
              ðŸ’° {trip?.userSelection?.budget} Budget
            </span>
            <span className="px-3 py-1 bg-gray-100 text-sm text-gray-600 rounded-full shadow-sm">
              ðŸ‘« {trip?.userSelection?.traveler} Travelers
            </span>
          </div>
        </div>

        <div className="flex flex-col sm:flex-row items-start sm:items-center gap-3 sm:gap-4">
          <label className="text-sm font-medium text-gray-700">
            Select Trip Date:
            <input 
              type="date" 
              value={tripDate} 
              onChange={(e) => setTripDate(e.target.value)} 
              className="block mt-1 border rounded px-3 py-1 text-sm w-full sm:w-auto" 
            />
          </label>
          <Button onClick={handleSaveToProfile} className="flex items-center gap-2 bg-black text-white hover:bg-gray-800">
            <FaHeart className="text-sm" />
            Save to Profile
          </Button>
          <Button onClick={handleDownloadPDF} className="flex items-center gap-2 bg-blue-600 text-white hover:bg-blue-700">
            <IoIosSend className="text-sm" />
            Download Trip PDF
          </Button>
        </div>
      </div>
    </div>
  );
}

export default InfoSection;
